import os, sys, shutil, arcpy
import traceback, time

def log(message):
    arcpy.AddMessage(message)
    with file(sys.argv[0]+".log", 'a') as logFile:
        logFile.write("%s:\t%s\n" % (time.asctime(), message))
    
class Toolbox(object):
    def __init__(self):
        self.label = "WIP tools"
        self.alias = ""
        self.tools = [TopoHydro, ImpCov, Runoff]
        
class TopoHydro(object):
    def __init__(self):
        self.label = "Topography and Hydrology Analysis"
        self.description = "Establishes the watershed and stream network"
        self.canRunInBackground = False
        
        arcpy.env.Workspace = self.Workspace = os.path.split(__file__)[0]
        log("Workspace = " + arcpy.env.Workspace)
        arcpy.env.overwriteOutput = True       

    def getParameterInfo(self):
        """Define parameter definitions"""
        
        param0 = arcpy.Parameter(
            displayName="Input Digital Elevation Model",
            name="DEM",
            datatype="DERasterDataset",
            parameterType="Required",
            direction="Input",
            multiValue=False)  
            
        param1 = arcpy.Parameter(
            displayName="Analysis Mask",
            name="Mask",
            datatype="DEFeatureClass",
            parameterType="Optional",
            direction="Input",
            multiValue=False)  
        
        param2 = arcpy.Parameter(
            displayName="Threshold accumulation for Stream formation (acres)",
            name="StreamFormation",
            datatype="GPDouble",
            parameterType="Required",
            direction="Input",
            multiValue=False)  
        
        params = [ param0, param1, param2 ]
        return params

    def isLicensed(self):
        return True

    def updateParameters(self, parameters):
        return

    def updateMessages(self, parameters):
        return
            
    def execute(self, parameters, messages):
        try:
            log("Parameters are %s, %s, %s" % (parameters[0].valueAsText, parameters[1].valueAsText, parameters[2].valueAsText))
            # -*- coding: utf-8 -*-
            # ---------------------------------------------------------------------------
            # dem2stream.py
            # Created on: 2016-05-10 12:35:40.00000
            #   (generated by ArcGIS/ModelBuilder)
            # Description: 
            # ---------------------------------------------------------------------------

            # Import arcpy module
            import arcpy


            # Local variables:
            DEM = "C:\\lab6newnew\\Lab06Data.gdb\\DEM"
            AnalysisMask = "C:\\lab6newnew\\Lab06Data.gdb\\AnalysisMask"
            Fill_DEM3 = "C:\\lab6newnew\\Lab06Data.gdb\\Fill_DEM3"
            Output_drop_raster = ""
            FlowDir_Fill4 = "C:\\lab6newnew\\Lab06Data.gdb\\FlowDir_Fill4"
            FlowAcc_new = "C:\\lab6newnew\\Lab06Data.gdb\\FlowAcc_new"
            rastercalc3new = "C:\\lab6newnew\\Lab06Data.gdb\\rastercalc3new"
            Reclassflownew = "C:\\lab6newnew\\Lab06Data.gdb\\Reclassflownew"
            Streamnew = "C:\\lab6newnew\\Lab06Data.gdb\\Streamnew"
            AnalysisMask_PolygonToRaster = "C:\\lab6newnew\\Lab06Data.gdb\\AnalysisMask_PolygonToRaster"

            # Process: Fill
            tempEnvironment0 = arcpy.env.snapRaster
            arcpy.env.snapRaster = DEM
            tempEnvironment1 = arcpy.env.extent
            arcpy.env.extent = AnalysisMask
            tempEnvironment2 = arcpy.env.cellSize
            arcpy.env.cellSize = DEM
            tempEnvironment3 = arcpy.env.mask
            arcpy.env.mask = AnalysisMask
            arcpy.gp.Fill_sa(DEM, Fill_DEM3, "")
            arcpy.env.snapRaster = tempEnvironment0
            arcpy.env.extent = tempEnvironment1
            arcpy.env.cellSize = tempEnvironment2
            arcpy.env.mask = tempEnvironment3

            # Process: Flow Direction
            tempEnvironment0 = arcpy.env.snapRaster
            arcpy.env.snapRaster = DEM
            tempEnvironment1 = arcpy.env.extent
            arcpy.env.extent = AnalysisMask
            tempEnvironment2 = arcpy.env.cellSize
            arcpy.env.cellSize = DEM
            tempEnvironment3 = arcpy.env.mask
            arcpy.env.mask = AnalysisMask
            arcpy.gp.FlowDirection_sa(Fill_DEM3, FlowDir_Fill4, "FORCE", Output_drop_raster)
            arcpy.env.snapRaster = tempEnvironment0
            arcpy.env.extent = tempEnvironment1
            arcpy.env.cellSize = tempEnvironment2
            arcpy.env.mask = tempEnvironment3

            # Process: Flow Accumulation
            tempEnvironment0 = arcpy.env.snapRaster
            arcpy.env.snapRaster = DEM
            tempEnvironment1 = arcpy.env.extent
            arcpy.env.extent = AnalysisMask
            tempEnvironment2 = arcpy.env.cellSize
            arcpy.env.cellSize = DEM
            tempEnvironment3 = arcpy.env.mask
            arcpy.env.mask = AnalysisMask
            arcpy.gp.FlowAccumulation_sa(FlowDir_Fill4, FlowAcc_new, "", "FLOAT")
            arcpy.env.snapRaster = tempEnvironment0
            arcpy.env.extent = tempEnvironment1
            arcpy.env.cellSize = tempEnvironment2
            arcpy.env.mask = tempEnvironment3

            # Process: Raster Calculator
            arcpy.gp.RasterCalculator_sa("\"%FlowAcc_new%\" * (0.0367309458)", rastercalc3new)

            # Process: Reclassify
            arcpy.gp.Reclassify_sa(rastercalc3new, "Value", "0 183.66491889898384 NODATA;183.66491889898384 22524.517892934 1", Reclassflownew, "DATA")

            # Process: Stream to Feature
            arcpy.gp.StreamToFeature_sa(Reclassflownew, FlowDir_Fill4, Streamnew, "SIMPLIFY")

            # Process: Polygon to Raster
            tempEnvironment0 = arcpy.env.snapRaster
            arcpy.env.snapRaster = DEM
            tempEnvironment1 = arcpy.env.extent
            arcpy.env.extent = DEM
            arcpy.PolygonToRaster_conversion(AnalysisMask, "OBJECTID", AnalysisMask_PolygonToRaster, "CELL_CENTER", "NONE", DEM)
            arcpy.env.snapRaster = tempEnvironment0
            arcpy.env.extent = tempEnvironment1





        except Exception as err:
            log(traceback.format_exc())
            log(err)
            raise err
        return

class ImpCov(object):
    def __init__(self):
        self.label = "Imperviousness Analysis"
        self.description = "Impervious area contributions"
        self.canRunInBackground = False
        
        arcpy.env.Workspace = self.Workspace = os.path.split(__file__)[0]
        log("Workspace = " + arcpy.env.Workspace)
        arcpy.env.overwriteOutput = True       

    def getParameterInfo(self):
        """Define parameter definitions"""
        
        param0 = arcpy.Parameter(
            displayName="Impervious Areas",
            name="ImperviousAreas",
            datatype="DEFeatureClass",
            parameterType="Required",
            direction="Input",
            multiValue=False)  
            
        param1 = arcpy.Parameter(
            displayName="Lakes",
            name="Lakes",
            datatype="DEFeatureClass",
            parameterType="Optional",
            direction="Input",
            multiValue=False)  
        
        params = [ param0, param1 ]
        return params

    def isLicensed(self):
        return True

    def updateParameters(self, parameters):
        return

    def updateMessages(self, parameters):
        return
            
    def execute(self, parameters, messages):
        try:
            log("Parameters are %s, %s" % (parameters[0].valueAsText, parameters[1].valueAsText))

            # -*- coding: utf-8 -*-
            # ---------------------------------------------------------------------------
            # impervious2stream.py
            # Created on: 2016-05-10 12:36:56.00000
            #   (generated by ArcGIS/ModelBuilder)
            # Description: 
            # ---------------------------------------------------------------------------

            # Import arcpy module
            import arcpy


            # Local variables:
            FlowAcc_new = "C:\\lab6newnew\\Lab06Data.gdb\\FlowAcc_new"
            FlowDir_Fill4 = "C:\\lab6newnew\\Lab06Data.gdb\\FlowDir_Fill4"
            Impervious = "C:\\lab6newnew\\Lab06Data.gdb\\Impervious"
            Impervious__3_ = Impervious
            Feature_Impe1 = "C:\\lab6newnew\\Lab06Data.gdb\\Feature_Impe1"
            BlockSt_Feat1 = "C:\\lab6newnew\\Lab06Data.gdb\\BlockSt_Feat1"
            Aggrega_Bloc1 = "C:\\lab6newnew\\Lab06Data.gdb\\Aggrega_Bloc1"
            AnalysisMask = "C:\\lab6newnew\\Lab06Data.gdb\\AnalysisMask"
            FlowAcc_Flowimp = "C:\\lab6newnew\\Lab06Data.gdb\\FlowAcc_Flowimp"
            FlowAccRatio2 = "C:\\lab6newnew\\Lab06Data.gdb\\FlowAccRatio2"
            Input_raster_or_constant_value_2 = "100"
            floatratio2 = "C:\\lab6newnew\\Lab06Data.gdb\\floatratio2"
            ratioclass2 = "C:\\lab6newnew\\Lab06Data.gdb\\ratioclass2"
            Reclassflownew = "C:\\lab6newnew\\Lab06Data.gdb\\Reclassflownew"
            weightedstreammask2 = "C:\\lab6newnew\\Lab06Data.gdb\\weightedstreammask2"
            weightedstream2 = "C:\\lab6newnew\\Lab06Data.gdb\\weightedstream2"

            # Process: Calculate Field
            arcpy.CalculateField_management(Impervious, "LENGTH", "1", "VB", "")

            # Process: Feature to Raster
            arcpy.FeatureToRaster_conversion(Impervious__3_, "LENGTH", Feature_Impe1, "4")

            # Process: Block Statistics
            arcpy.gp.BlockStatistics_sa(Feature_Impe1, BlockSt_Feat1, "Rectangle 10 10 CELL", "SUM", "DATA")

            # Process: Aggregate
            arcpy.gp.Aggregate_sa(BlockSt_Feat1, Aggrega_Bloc1, "10", "MEAN", "EXPAND", "DATA")

            # Process: Flow Accumulation
            tempEnvironment0 = arcpy.env.mask
            arcpy.env.mask = AnalysisMask
            arcpy.gp.FlowAccumulation_sa(FlowDir_Fill4, FlowAcc_Flowimp, Aggrega_Bloc1, "FLOAT")
            arcpy.env.mask = tempEnvironment0

            # Process: Divide (2)
            arcpy.gp.Divide_sa(FlowAcc_new, FlowAcc_Flowimp, FlowAccRatio2)

            # Process: Divide
            arcpy.gp.Divide_sa(FlowAccRatio2, Input_raster_or_constant_value_2, floatratio2)

            # Process: Reclassify
            arcpy.Reclassify_3d(floatratio2, "Value", "0 1;0 0.10000000000000001 2;0.10000000000000001 0.20000000000000001 3;0.20000000000000001 0.29999999999999999 4;0.29999999999999999 0.40000000000000002 5;0.40000000000000002 0.5 6;0.5 0.59999999999999998 7;0.59999999999999998 0.70000000000000007 8;0.70000000000000007 0.80000000000000004 9;0.80000000000000004 1 10", ratioclass2, "DATA")

            # Process: Times
            arcpy.gp.Times_sa(ratioclass2, Reclassflownew, weightedstreammask2)

            # Process: Stream to Feature
            arcpy.gp.StreamToFeature_sa(weightedstreammask2, FlowDir_Fill4, weightedstream2, "SIMPLIFY")





            #Impervious to rural and urban basin peak flow(I coded this on my own rather then export from model, so I am not really
            #sure how well this will integrate with the pythontoolbox

            #from math import pow
            import arcpy,numpy

            #impervious area(in percent) / drainage area to raster
            imp =  arcpy.Raster(r'C:\lab6newnew\Lab06Data.gdb\floatratio')
            drain = arcpy.Raster(r'C:\lab6newnew\Lab06Data.gdb\rastercalc3new')

            pers = arcpy.RasterToNumPyArray(imp)
            darea = arcpy.RasterToNumPyArray(drain)

            rows = len(pers)
            cols = len(pers[0])

            #regression equation for rural basin peakflow
            def cfs(da,interval):
                f = [144,248,334,467,581,719]
                e = [0.691,0.670,0.665,.655,0.65,0.643]

                if interval == 0:
                    flow = f[0]*pow(da,e[0])
                if interval == 1:
                    flow = f[1]*pow(da,e[1])
                if interval == 2:
                    flow = f[2]*pow(da,e[2])
                if interval == 3:
                    flow = f[3]*pow(da,e[3])
                if interval == 4:
                    flow = f[4]*pow(da,e[4])
                if interval == 5:
                    flow = f[5]*pow(da,e[5])


                return round(flow,4)

            #regression equations for urban basin peak flow
            def q25(drain,iapercent,cum,interval):
                if interval == 0:
                    q = 7.87*pow(drain,0.539)*pow(iapercent,0.686)*pow(cum,.29)
                if interval == 1:
                    q = 16.3*pow(drain,0.489)*pow(iapercent,0.572)*pow(cum,.286)
                if interval == 2:
                    q = 22.7*pow(drain,0.463)*pow(iapercent,0.515)*pow(cum,.289)
                if interval == 3:
                    q = 28.5*pow(drain,0.39)*pow(iapercent,0.436)*pow(cum,.338)
                if interval == 4:
                    q = 37.4*pow(drain,0.391)*pow(iapercent,0.396)*pow(cum,.325)
                if interval == 5:
                    q = 48*pow(drain,0.392)*pow(iapercent,0.358)*pow(cum,.312)
                return round(q,4)


            start = time.time()
            print "Starting at %s" % (time.asctime())

            #loops through every cell in analysis mask to determine peak flow based on
            #regression equations

            for fint in range(0,6):
                print "interval %i Starting at %s" % (fint,time.asctime())
                ODprac = numpy.empty([rows,cols],dtype = float)

                for R in range(1,rows-1):
                    for C in range(1,cols-1):
                        pix1 = pers[R][C]
                        pix2 = darea[R][C]
                        if pix1 > 0:
                            ODprac[R][C] = q25(pix2,pix1,cfs(pix2,fint),fint)

                outpath = "C:\lab6newnew\Lab06Data.gdb\peakflow%i" % (fint+10)
                lowerLeft = arcpy.Point(imp.extent.XMin,imp.extent.YMin)
                cellSize  = imp.meanCellWidth
                outputRaster = arcpy.NumPyArrayToRaster(ODprac,lowerLeft,cellSize)
                outputRaster.save(outpath)
                print " interval % i took %s seconds " % (fint,(time.time()-start))

    

            
            
        except Exception as err:
            log(traceback.format_exc())
            log(err)
            raise err
        return
        
class Runoff(object):
    def __init__(self):
        self.label = "Runoff Calculations"
        self.description = "Calculation of standard storm flows via USGS regression equations"
        self.canRunInBackground = False
        
        arcpy.env.Workspace = self.Workspace = os.path.split(__file__)[0]
        log("Workspace = " + arcpy.env.Workspace)
        arcpy.env.overwriteOutput = True       

    def getParameterInfo(self):
        """Define parameter definitions"""
        
        param0 = arcpy.Parameter(
            displayName="Curve Number",
            name="Landuse",
            datatype="DEFeatureClass",
            parameterType="Required",
            direction="Input",
            multiValue=False)  
        
        params = [ param0 ]
        return params

    def isLicensed(self):
        return True

    def updateParameters(self, parameters):
        return

    def updateMessages(self, parameters):
        return
            
    def execute(self, parameters, messages):
        try:
            log("Parameter is %s" % (parameters[0].valueAsText))
        except Exception as err:
            log(traceback.format_exc())
            log(err)
            raise err
        return





##Model script for extracting peak flows to "pseudo" stream gages  from calculated peakflow raster.
##Note: the "pseudo" stream gages were added based on the BMP layer then edited to select the most
##appropriate locations to display peak flow



###Import arcpy module
##import arcpy
##
##
### Local variables:
##pseudogages = "C:\\lab6newnew\\Lab06Data.gdb\\pseudogages"
##peakflow10 = "C:\\lab6newnew\\Lab06Data.gdb\\peakflow10"
##yr2points = "C:\\lab6newnew\\Lab06Data.gdb\\yr2points"
##peakflow11 = "C:\\lab6newnew\\Lab06Data.gdb\\peakflow11"
##yr5points = "C:\\lab6newnew\\Lab06Data.gdb\\yr5points"
##peakflow12 = "C:\\lab6newnew\\Lab06Data.gdb\\peakflow12"
##yr10points = "C:\\lab6newnew\\Lab06Data.gdb\\yr10points"
##peakflow13 = "C:\\lab6newnew\\Lab06Data.gdb\\peakflow13"
##yr25points = "C:\\lab6newnew\\Lab06Data.gdb\\yr25points"
##peakflow14 = "C:\\lab6newnew\\Lab06Data.gdb\\peakflow14"
##yr50points = "C:\\lab6newnew\\Lab06Data.gdb\\yr50points"
##peakflow15 = "C:\\lab6newnew\\Lab06Data.gdb\\peakflow15"
##yr100points = "C:\\lab6newnew\\Lab06Data.gdb\\yr100points"
##yr2pointsssss_lyr = "C:\\lab6newnew\\yr2pointsssss.lyr"
##
### Process: Extract Values to Points
##arcpy.gp.ExtractValuesToPoints_sa(pseudogages, peakflow10, yr2points, "NONE", "VALUE_ONLY")
##
### Process: Extract Values to Points (2)
##arcpy.gp.ExtractValuesToPoints_sa(pseudogages, peakflow11, yr5points, "NONE", "VALUE_ONLY")
##
### Process: Extract Values to Points (3)
##arcpy.gp.ExtractValuesToPoints_sa(pseudogages, peakflow12, yr10points, "NONE", "VALUE_ONLY")
##
### Process: Extract Values to Points (4)
##arcpy.gp.ExtractValuesToPoints_sa(pseudogages, peakflow13, yr25points, "NONE", "VALUE_ONLY")
##
### Process: Extract Values to Points (5)
##arcpy.gp.ExtractValuesToPoints_sa(pseudogages, peakflow14, yr50points, "NONE", "VALUE_ONLY")
##
### Process: Extract Values to Points (6)
##arcpy.gp.ExtractValuesToPoints_sa(pseudogages, peakflow15, yr100points, "NONE", "VALUE_ONLY")
##





